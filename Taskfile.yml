version: '3'

vars:
  APP_NAME: textsplitter
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'

env:
  CGO_ENABLED: 0

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  deps:
    desc: 📦 Install dependencies
    cmds:
      - echo "📦 Installing dependencies..."
      - go mod tidy
      - go mod download
      - go mod verify

  build:
    desc: 🔨 Build textsplitter
    cmds:
      - echo "🔨 Building textsplitter..."
      - go build -ldflags "-X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}}" -o {{.APP_NAME}} ./cmd/{{.APP_NAME}}
    sources:
      - cmd/textsplitter/main.go
      - cmd/textsplitter/web/index.html
      - go.mod
      - go.sum
    generates:
      - "{{.APP_NAME}}"

  install:
    desc: 📲 Install textsplitter to /usr/local/bin
    deps: [build]
    cmds:
      - echo "📲 Installing textsplitter..."
      - sudo cp {{.APP_NAME}} /usr/local/bin/
      - echo "✅ Installed {{.APP_NAME}} to /usr/local/bin"
      - echo "💡 Now you can run 'textsplitter' from anywhere!"

  install-local:
    desc: 📲 Install textsplitter to ~/bin (no sudo required)
    deps: [build]
    cmds:
      - mkdir -p ~/bin
      - cp {{.APP_NAME}} ~/bin/
      - echo "✅ Installed {{.APP_NAME}} to ~/bin"
      - echo "💡 Make sure ~/bin is in your PATH"
      - echo "💡 Now you can run 'textsplitter' from anywhere!"

  run:
    desc: 🚀 Run textsplitter (opens browser automatically)
    deps: [build]
    cmds:
      - echo "🚀 Starting TextSplitter..."
      - ./{{.APP_NAME}} {{.CLI_ARGS}}

  run-port:
    desc: 🚀 Run textsplitter on custom port (e.g., task run-port -- --port 8081)
    deps: [build]
    cmds:
      - ./{{.APP_NAME}} {{.CLI_ARGS}}

  clean:
    desc: 🧹 Clean up build artifacts
    cmds:
      - echo "🧹 Cleaning up..."
      - rm -f {{.APP_NAME}}
      - rm -rf dist/
      - go clean

  test:
    desc: 🧪 Run tests
    cmds:
      - echo "🧪 Running tests..."
      - go test -v ./...

  fmt:
    desc: 🎯 Format code
    cmds:
      - echo "🎯 Formatting code..."
      - go fmt ./...
      - goimports -w . 2>/dev/null || true

  lint:
    desc: 🔍 Lint code
    cmds:
      - echo "🔍 Linting code..."
      - golangci-lint run || echo "💡 Install golangci-lint for better linting"

  release:
    desc: 📦 Build release versions for multiple platforms
    cmds:
      - echo "📦 Building release versions..."
      - mkdir -p dist
      - task: release-build
        vars:
          GOOS: darwin
          GOARCH: amd64
          SUFFIX: darwin-amd64
      - task: release-build
        vars:
          GOOS: darwin
          GOARCH: arm64
          SUFFIX: darwin-arm64
      - task: release-build
        vars:
          GOOS: linux
          GOARCH: amd64
          SUFFIX: linux-amd64
      - task: release-build
        vars:
          GOOS: windows
          GOARCH: amd64
          SUFFIX: windows-amd64
          EXT: .exe
      - echo "✅ Release builds completed in dist/"
      - ls -la dist/

  release-build:
    internal: true
    cmds:
      - GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags "-X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}}" -o dist/{{.APP_NAME}}-{{.SUFFIX}}{{.EXT}} ./cmd/{{.APP_NAME}}

  check:
    desc: 🔎 Run all checks (fmt, lint, test)
    cmds:
      - task: fmt
      - task: lint
      - task: test

  setup:
    desc: 🛠️  Initial setup for development
    cmds:
      - echo "🛠️ Setting up TextSplitter development environment..."
      - task: deps
      - task: build
      - echo "✅ Setup complete!"
      - echo "💡 Run 'task run' to start the web interface"
      - echo "💡 Run 'task install-local' to install globally"

  update:
    desc: 🔄 Update dependencies
    cmds:
      - echo "🔄 Updating dependencies..."
      - go get -u ./...
      - go mod tidy
      - echo "✅ Dependencies updated"